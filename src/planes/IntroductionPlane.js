// src/planes/IntroductionPlane.js
import { MESSAGES, PLANES } from "../utils/constants.js";
import { Utils } from "../utils/helpers.js";
import { globalEventBus, EVENTS } from "../core/EventBus.js";

export class IntroductionPlane {
  constructor(terminal) {
    if (!terminal) {
      throw new Error(
        "IntroductionPlane: No se proporcion√≥ una instancia de terminal v√°lida"
      );
    }
    this.terminal = terminal;
  }

  async enter() {
    try {
      this.terminal.clear();
      await this.showIntroduction();
      await this.waitForUserInteraction();
      this.complete();
    } catch (error) {
      console.error("Error en IntroductionPlane.enter():", error);
      throw error;
    }
  }

  async showIntroduction() {
    console.log("Iniciando showIntroduction...");

    const titleArt = `
  ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó
  ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù
  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù 
  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó  ‚ïö‚ñà‚ñà‚ïî‚ïù  
  ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   
  ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù   

      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó     ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïó
      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïù
      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ïî‚ïù 
      ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë ‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó 
      ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïó
      ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù
    `;

    try {
      await this.terminal.writeLine(titleArt, "ascii-art", false);
      await this.terminal.writeLine(
        MESSAGES.INTRODUCTION.subtitle,
        "subtitle",
        true
      );
    } catch (error) {
      console.error("Error en showIntroduction:", error);
      throw error;
    }
  }

  async waitForUserInteraction() {
    console.log("üí° Iniciando waitForUserInteraction...");

    // Mostrar el mensaje
    await this.terminal.writeLine(
      "[Haz clic AQU√ç o presiona cualquier tecla para continuar]",
      "continue-prompt",
      true
    );

    // Crear una promesa que se resuelve con CUALQUIER interacci√≥n
    return new Promise((resolve) => {
      console.log("üéØ Configurando listeners...");

      let resolved = false;

      const resolveOnce = (source) => {
        if (resolved) return;
        resolved = true;
        console.log(`‚úÖ Resolviendo desde: ${source}`);

        // Limpiar todos los listeners
        document.removeEventListener("keydown", keyHandler);
        document.removeEventListener("click", clickHandler);
        document.removeEventListener("touchstart", touchHandler);

        resolve();
      };

      // Handler para teclado
      const keyHandler = (event) => {
        console.log(`üî• Tecla detectada: ${event.key}`);
        event.preventDefault();
        resolveOnce("keyboard");
      };

      // Handler para clicks
      const clickHandler = (event) => {
        console.log("üñ±Ô∏è Click detectado");
        event.preventDefault();
        resolveOnce("click");
      };

      // Handler para touch (m√≥viles)
      const touchHandler = (event) => {
        console.log("üëÜ Touch detectado");
        event.preventDefault();
        resolveOnce("touch");
      };

      // Agregar listeners a todo el documento
      document.addEventListener("keydown", keyHandler);
      document.addEventListener("click", clickHandler);
      document.addEventListener("touchstart", touchHandler);

      console.log("üëÇ Esperando interacci√≥n del usuario...");

      // Auto-continuar despu√©s de 10 segundos como backup
      setTimeout(() => {
        if (!resolved) {
          console.log("‚è∞ Auto-continuando despu√©s de 10 segundos...");
          resolveOnce("timeout");
        }
      }, 10000);
    });
  }

  complete() {
    console.log("üéâ IntroductionPlane completado!");
    try {
      globalEventBus.emit(EVENTS.PLANE_COMPLETE, {
        planeId: PLANES.INTRODUCTION,
      });
    } catch (error) {
      console.error("Error al completar IntroductionPlane:", error);
      throw error;
    }
  }
}
